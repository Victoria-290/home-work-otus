package service

import (
	"context"
	"strconv"
	"time"

	"github.com/Victoria-290/home-work-otus/Progect/internal/model/auth"
	"github.com/Victoria-290/home-work-otus/Progect/internal/model/task"
	"github.com/Victoria-290/home-work-otus/Progect/internal/model/user"
)

var emailCounter = 1
var taskCounter = 1

// EntityEvent — интерфейс, который реализуют все сущности, сохраняемые в store
type EntityEvent interface{}

// StartGenerator — генератор случайных сущностей, который работает по таймеру и останавливается через context
func StartGenerator(ctx context.Context, ch chan<- EntityEvent) {
	ticker := time.NewTicker(1 * time.Second)
	defer ticker.Stop()

	for {
		select {
		case <-ctx.Done():
			return
		case <-ticker.C:
			// Генерация пользователя
			u := user.NewUser(
				"user"+strconv.Itoa(emailCounter)+"@test.com",
				"pass123",
			)
			u.ID = int64(emailCounter)
			emailCounter++
			ch <- u

			// Генерация задачи
			t := task.NewTask(
				"Task #"+strconv.Itoa(taskCounter),
				"Generated by generator",
				u.ID,
			)
			t.ID = int64(taskCounter)
			taskCounter++
			ch <- t

			// Генерация токена
			token := &auth.Token{
				UserID:    u.ID,
				Token:     "some-jwt-token",
				ExpiresAt: time.Now().Add(time.Hour),
				IsRefresh: false,
			}
			ch <- token
		}
	}
}
