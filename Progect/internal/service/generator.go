package service

import (
	"math/rand"
	"time"

	"github.com/Victoria-290/home-work-otus/Progect/internal/model/auth"
	"github.com/Victoria-290/home-work-otus/Progect/internal/model/task"
	"github.com/Victoria-290/home-work-otus/Progect/internal/model/user"
	"github.com/Victoria-290/home-work-otus/Progect/internal/repository"
)

var emailCounter = 1
var taskCounter = 1

// StartGenerator создает сущности и отправляет их в канал по заданному интервалу
func StartGenerator(ch chan<- EntityEvent, interval time.Duration) {
	rand.Seed(time.Now().UnixNano())

	ticker := time.NewTicker(interval)
	defer ticker.Stop()

	for range ticker.C {
		// Создаем пользователя
		u := user.NewUser(
			"user"+strconv.Itoa(emailCounter)+"@test.com",
			"pass123",
		)
		u.ID = int64(emailCounter)
		emailCounter++

		ch <- EntityEvent{Entity: u}

		// Создаем задачу
		t := task.NewTask(
			"Task #"+strconv.Itoa(taskCounter),
			"Generated by scheduler",
			u.ID,
		)
		t.ID = int64(taskCounter)
		taskCounter++

		ch <- EntityEvent{Entity: t}

		// Создаем токен
		token := &auth.Token{
			UserID:    u.ID,
			Token:     "token-" + strconv.Itoa(rand.Intn(100000)),
			ExpiresAt: time.Now().Add(time.Hour),
			IsRefresh: false,
		}

		ch <- EntityEvent{Entity: token}
	}
}
